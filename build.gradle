apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'signing'


group 'com.backendless'
version '3.0.11-snapshot'
archivesBaseName='backendless'



sourceCompatibility = 1.7

def getMavenSettingsCredentials = {
    String userHome = System.getProperty( "user.home" );
    File mavenSettings = new File(userHome, ".m2/settings.xml")
    def xmlSlurper = new XmlSlurper()
    def output = xmlSlurper.parse(mavenSettings)
    return output.servers."server"
}

if (JavaVersion.current().isJava8Compatible())
{
    allprojects {
        tasks.withType( Javadoc ) {
            options.addStringOption( 'Xdoclint:none', '-quiet' )
        }
    }
}

task logInfo {
    doFirst {
        println getMavenSettingsCredentials()
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

//signing {
//    sign configurations.archives
//}

uploadArchives {
    repositories {
        mavenDeployer {


            def ossrhUsername=''
            def ossrhPassword=''

            pom.whenConfigured {
                p -> p.dependencies = p.dependencies.findAll {
                    dep -> dep.artifactId != "commons"
                }
            }

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Backendless android sdk'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Android SDK used by developers to provide Backendless API in apps.'
                url 'http://backendless.com'

                scm {
                    connection 'scm:git:https://github.com/Backendless/Android-SDK.git'
                    developerConnection 'scm:git:https://github.com/Backendless/Android-SDK.git'
                    url 'https://github.com/Backendless/Android-SDK.git'
                }

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'backendless'
                        name 'backendless'
                        email 'info@backednless.com'
                    }
                }
            }
        }
    }
}

def getCredentials = {
    def entries = getMavenSettingsCredentials()
    for( entry in entries )
    {
        if( entry."id".text() == "backendless_public" )
        {
            return [username: entry.username.text(), password: entry.password.text()]
        }
    }
}

def creds = getCredentials()

sourceSets {
    main {
        java {
            srcDir './src'
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url "http://maven.backendless.com/repository/backendless_public"
    }
    flatDir {
        dirs 'libs'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            credentials {
                username creds.username
                password creds.password
            }

            url "http://maven.backendless.com/repository/backendless_public"
        }
    }
}

configurations {
    provided
    compile.extendsFrom provided
}

jar {
    from {
        (configurations.runtime - configurations.provided).collect {
            it.isDirectory() ? it : zipTree( it )
        }
    }
}

task copySampleJars << {
    copyT(jar.archivePath, projectDir.path+'/samples/DataService/tododemo/libs', jar.getArchiveName(  ))
    copyT(jar.archivePath, projectDir.path+'/samples/EndlessMatchMaker/libs', jar.getArchiveName(  ))
    copyT(jar.archivePath, projectDir.path+'/samples/EndlessTagging/libs', jar.getArchiveName(  ))
    copyT(jar.archivePath, projectDir.path+'/samples/FenceDemo/libs', jar.getArchiveName(  ))
    copyT(jar.archivePath, projectDir.path+'/samples/FileService/filedemo/libs', jar.getArchiveName(  ))
    copyT(jar.archivePath, projectDir.path+'/samples/GeoService/geodemo/libs', jar.getArchiveName(  ))
    copyT(jar.archivePath, projectDir.path+'/samples/MessagingService/pubsubdemo/libs', jar.getArchiveName(  ))
    copyT(jar.archivePath, projectDir.path+'/samples/MessagingService/pushdemo/libs', jar.getArchiveName(  ))
    copyT(jar.archivePath, projectDir.path+'/samples/UserService/FacebookSDKSamples/login/libs', jar.getArchiveName(  ))
    copyT(jar.archivePath, projectDir.path+'/samples/UserService/rolesdemo/libs/', jar.getArchiveName(  ))
    copyT(jar.archivePath, projectDir.path+'/samples/UserService/userservicedemo/libs', jar.getArchiveName(  ))
}

task copyJarToOut << {
    copyT(jar.archivePath, projectDir.path+'/out', jar.getArchiveName(  ))
}

def copyT(fromPath, toPath, archName)
{
   copy{
      from fromPath into toPath
      rename(archName, 'backendless.jar')
   }
}

dependencies {
    compile fileTree(dir: 'libs', include: 'weborbclient.jar')
    compile fileTree(dir: 'libs', include: 'mediaLib.jar')
    provided fileTree(dir: 'libs', include: 'android.jar')
    provided fileTree(dir: 'libs', include: 'android.support.v4.jar')
    provided fileTree(dir: 'libs', include: 'FacebookSDK.jar')
    provided fileTree(dir: 'libs', include: 'maps.jar')
    compile ('com.backendless:commons:3.0.11'){
        exclude group: 'com.fasterxml.jackson.core'
    }

}
apply plugin: 'java'
